@if (IsShown)
{
    <div class="length-text-container"
         style="left: @(X + "px"); top: @(Y + "px");">
        <input class="length-text-input"
               value="@(Math.Round(value, Precision, MidpointRounding.AwayFromZero))"
               @oninput="OnValueChanged"
               @attributes="AdditionalParameters" />
    </div>
}

@code {
    [Parameter] public bool IsShown { get; set; }
    [Parameter] public EventCallback<bool> IsShownChanged { get; set; }
    [Parameter] public double Value { get => value; set => this.value = value; }
    [Parameter] public EventCallback<double> ValueChanged { get; set; }
    [Parameter] public double MinValue { get; set; } = 1;
    [Parameter] public double MaxValue { get; set; } = 300;
    [Parameter] public int Precision { get; set; } = 1;

    [Parameter] public int X { get; set; }
    [Parameter] public int Y { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> AdditionalParameters { get; set; }

    private double value;
    private void OnValueChanged(ChangeEventArgs e)
    {
        var val = e.Value.ToString();
        var isValid = double.TryParse(val, out double result);
        if (string.IsNullOrEmpty(val))
        {
            isValid = true;
            result = 0;
        }
        if (isValid)
        {
            if (result < MinValue)
                result = MinValue;
            if (result > MaxValue)
                result = MaxValue;
            this.value = result;
            ValueChanged.InvokeAsync(this.value);
        }
    }
}
