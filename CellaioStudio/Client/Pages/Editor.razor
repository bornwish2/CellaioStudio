@page "/"
@page "/editor"
@page "/editor/{ProjectID}"
@inject IJSRuntime JSRuntime
@inject IProjectsRepository projectsRepository

<div class="editor-container">
    <div class="toolbar-container">
        <div>
            <button class="btn-tool btn btn-primary btn-sm"
                    @onclick="AddShelve">
                Add shelve
            </button>
        </div>
        <div>
            <button class="btn-tool btn btn-primary btn-sm"
                    @onclick="DownloadScene">
                Download
            </button>
        </div>
        <div>
            <button class="btn-tool btn btn-primary btn-sm"
                    onclick="document.getElementById('inputFile').click()">
                Load
            </button>
            <InputFile OnChange="@LoadScene"
                       style="display: none;"
                       id="inputFile" />
        </div>
        <div>
            <button class="btn-tool btn btn-primary btn-sm"
                    @onclick="SaveSnapshot">
                Snapshot
            </button>
        </div>
        <div>
            <button class="btn-tool btn btn-success btn-sm"
                    @onclick="SaveScene">
                Save
            </button>
        </div>
    </div>

    <ContextMenu Items="ContextMenuItems"
                 @bind-IsShown="isContextMenuShown"
                 X="contextMenuX"
                 Y="contextMenuY" />


    <LengthText X="lengthTextX"
                Y="lengthTextY"
                @bind-IsShown="isLengthTextShown"
                @bind-Value="LengthValue" />


    @*ThreeJS*@
    <div id="threejscontainer"></div>

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="oi spinner-border"
                 style="color: white; width: 80px; height: 80px; margin: auto;"></div>
        </div>
    }
    else if (saveAs)
    {
        <div class="loading-container">
            <div class="saveas-prompt">
                <div class="saveas-title">
                    Please insert project's title:
                </div>
                <div>
                    <input class="saveas-input" @bind-value="editedProject.Title" />
                </div>
                <div style="float: left; margin: 5px 20px 20px 15px;">
                    <button class="btn btn-success" @onclick="ConfirmSaveAs"> Save </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string ProjectID { get; set; }
    Project editedProject;
    bool isLoading, saveAs;

    public List<ContextMenuItem> ContextMenuItems => contextMenuItems
        ?? (contextMenuItems = CreateContextMenuItems());
    private List<ContextMenuItem> contextMenuItems;
    bool isContextMenuShown;
    int contextMenuX, contextMenuY;

    bool isLengthTextShown;
    int lengthTextX = 400, lengthTextY = 500;

    List<ContextMenuItem> CreateContextMenuItems()
    {
        return new List<ContextMenuItem>()
{
            new ContextMenuItem("Rotate", async () => await RotateShelve()),
            new ContextMenuItem("Remove", async () => await RemoveShelve())
        };
    }

    internal double LengthValue
    {
        get => lengthValue;
        set
        {
            if (lengthValue == value) return;
            lengthValue = value;
            JSRuntime.InvokeVoidAsync("editor.setLength", value / 100);
        }
    }
    private double lengthValue;

    private async Task FinishedLengthEdit()
    {
        isLengthTextShown = false;
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task ShowContextMenu(int x, int y)
    {
        isContextMenuShown = false;
        contextMenuX = x;
        contextMenuY = y;
        isContextMenuShown = true;
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task HideContextMenu()
    {
        isContextMenuShown = false;
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task ShowLengthEdit(int x, int y, double currentLength)
    {
        isLengthTextShown = false;
        this.lengthValue = currentLength * 100;
        lengthTextX = x;
        lengthTextY = y;
        isLengthTextShown = true;
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task HideLengthEdit()
    {
        isLengthTextShown = false;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("editor.load", DotNetObjectReference.Create(this));
            if (!string.IsNullOrEmpty(ProjectID))
            {
                isLoading = true;
                await InvokeAsync(StateHasChanged);
                try
                {
                    Console.WriteLine("Opening project: " + ProjectID);
                    if (ProjectID == ExampleProject.ExampleProjectID.ToString()
                        || ProjectID.Contains("example"))
                        await ShowExample();
                    else if (int.TryParse(ProjectID, out int id))
                    {
                        isLoading = true;
                        await InvokeAsync(StateHasChanged);
                        editedProject = await projectsRepository.GetProject(id);
                        editedProject.Content = await projectsRepository.GetProjectContent(id);
                        var json = editedProject.Content;
                        if (!string.IsNullOrEmpty(json))
                            await JSRuntime.InvokeVoidAsync("editor.loadFromJson", json);
                    }
                }
                finally
                {
                    isLoading = false;
                    await InvokeAsync(StateHasChanged);
                }
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task AddShelve()
    {
        await JSRuntime.InvokeVoidAsync("editor.addShelve");
    }

    private async Task RotateShelve()
    {
        await JSRuntime.InvokeVoidAsync("editor.rotateShelve");
    }

    private async Task RemoveShelve()
    {
        await JSRuntime.InvokeVoidAsync("editor.removeShelve");
    }

    private async Task ShowExample()
    {
        await JSRuntime.InvokeVoidAsync("editor.exampleProject");
    }

    private async Task LoadScene(InputFileChangeEventArgs e)
    {
        var file = e.File;
        byte[] content = new byte[file.Size];
        await file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024)
            .ReadAsync(content, 0, content.Length);
        var json = System.Text.Encoding.UTF8.GetString(content);
        await JSRuntime.InvokeVoidAsync("editor.loadFromJson", json);
    }

    private async Task DownloadScene()
    {
        var json = await JSRuntime.InvokeAsync<System.Text.Json.JsonElement>("editor.serializeScene");
        var bytes = System.Text.Encoding.UTF8.GetBytes(json.GetRawText());
        await JSRuntime.SaveAsFile(bytes, "project.json");
    }

    private async Task SaveSnapshot()
    {
        try
        {
            var snapshot = await JSRuntime.InvokeAsync<string>("editor.saveSnapshot");
            var data = snapshot.Split(',')[1];
            var bytes = Convert.FromBase64String(data);
            await JSRuntime.SaveAsFile(bytes, "snapshot.jpg");
        }
        catch (Exception x)
        {
            Console.WriteLine(x.Message);
        }
    }

    private async Task SaveScene()
    {

        if (string.IsNullOrEmpty(ProjectID) && editedProject is null)
        {
            await SaveSceneAs();
            return;
        }

        isLoading = true;
        await InvokeAsync(StateHasChanged);
        await Task.Delay(300);

        var snapshot = await JSRuntime.InvokeAsync<string>("editor.saveSnapshot");
        var data = snapshot.Split(',')[1];
        var json = await JSRuntime.InvokeAsync<System.Text.Json.JsonElement>("editor.serializeScene");

        editedProject.Thumbnail = data;
        editedProject.Content = json.GetRawText();
        await projectsRepository.SaveProject(editedProject);
        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SaveSceneAs()
    {
        this.editedProject = new Project();
        saveAs = true;
        await Task.CompletedTask;
    }

    private async Task ConfirmSaveAs()
    {
        var newId = await projectsRepository.GetNewId();
        if (newId <= 0) return;

        this.editedProject.ID = newId;
        this.ProjectID = newId.ToString();
        await SaveScene();
        saveAs = false;
    }
}
