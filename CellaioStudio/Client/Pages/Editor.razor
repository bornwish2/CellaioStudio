@page "/"
@page "/editor"
@page "/editor/{ProjectID}"
@inject IJSRuntime JSRuntime
@inject IProjectsRepository projectsRepository

<div class="editor-container">
    <div class="toolbar-container">
        <div>
            <button class="btn-tool btn btn-primary btn-sm"
                    @onclick="AddShelve">
                Add shelve
            </button>
        </div>
        <div>
            <button class="btn-tool btn btn-primary btn-sm"
                    @onclick="SaveScene">
                Save
            </button>
        </div>
        <div>
            <button class="btn-tool btn btn-primary btn-sm"
                    onclick="document.getElementById('inputFile').click()">
                Load
            </button>
            <InputFile OnChange="@LoadScene"
                       style="display: none;"
                       id="inputFile" />
        </div>
    </div>

    <ContextMenu Items="ContextMenuItems"
                 @bind-IsShown="isContextMenuShown"
                 X="contextMenuX"
                 Y="contextMenuY" />

    <LengthText X="lengthTextX"
                Y="lengthTextY"
                @bind-IsShown="isLengthTextShown"
                @bind-Value="LengthValue"
                @onfocusout="FinishedLengthEdit" />

    @*ThreeJS*@
    <div id="threejscontainer"></div>

</div>

@code {
    [Parameter] public string ProjectID { get; set; }

    public List<ContextMenuItem> ContextMenuItems => contextMenuItems
        ?? (contextMenuItems = CreateContextMenuItems());
    private List<ContextMenuItem> contextMenuItems;
    bool isContextMenuShown;
    int contextMenuX, contextMenuY;

    bool isLengthTextShown;
    int lengthTextX = 400, lengthTextY = 500;

    List<ContextMenuItem> CreateContextMenuItems()
    {
        return new List<ContextMenuItem>()
{
            new ContextMenuItem("Rotate", async () => await RotateShelve()),
            new ContextMenuItem("Remove", async () => await RemoveShelve())
        };
    }

    internal double LengthValue
    {
        get => lengthValue;
        set
        {
            if (lengthValue == value) return;
            lengthValue = value;
            JSRuntime.InvokeVoidAsync("editor.setLength", value / 100);
        }
    }
    private double lengthValue;

    private async Task FinishedLengthEdit()
    {
        isLengthTextShown = false;
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task ShowContextMenu(int x, int y)
    {
        isContextMenuShown = false;
        contextMenuX = x;
        contextMenuY = y;
        isContextMenuShown = true;
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task HideContextMenu()
    {
        isContextMenuShown = false;
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task ShowLengthEdit(int x, int y, double currentLength)
    {
        isLengthTextShown = false;
        this.lengthValue = currentLength * 100;
        lengthTextX = x;
        lengthTextY = y;
        isLengthTextShown = true;
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task HideLengthEdit()
    {
        isLengthTextShown = false;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("editor.load", DotNetObjectReference.Create(this));
            if (!string.IsNullOrEmpty(ProjectID))
            {
                Console.WriteLine("Opening project: " + ProjectID);
                if (ProjectID == ExampleProject.ExampleProjectID.ToString()
                    || ProjectID.Contains("example"))
                    await ShowExample();
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task AddShelve()
    {
        await JSRuntime.InvokeVoidAsync("editor.addShelve");
    }

    private async Task RotateShelve()
    {
        await JSRuntime.InvokeVoidAsync("editor.rotateShelve");
    }

    private async Task RemoveShelve()
    {
        await JSRuntime.InvokeVoidAsync("editor.removeShelve");
    }

    private async Task ShowExample()
    {
        await JSRuntime.InvokeVoidAsync("editor.exampleProject");
    }

    private async Task LoadScene(InputFileChangeEventArgs e)
    {
        var file = e.File;
        byte[] content = new byte[file.Size];
        await file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024)
            .ReadAsync(content, 0, content.Length);
        var json = System.Text.Encoding.UTF8.GetString(content);
        await JSRuntime.InvokeVoidAsync("editor.loadFromJson", json);
    }

    private async Task SaveScene()
    {
        var json = await JSRuntime.InvokeAsync<System.Text.Json.JsonElement>("editor.serializeScene");
        var bytes = System.Text.Encoding.UTF8.GetBytes(json.GetRawText());
        await JSRuntime.SaveAsFile(bytes, "project.json");
    }
}
